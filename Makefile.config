## Copyright (C) 2009,2011,2013,2017-2019 Matthew Fluet.
 # Copyright (C) 1999-2007 Henry Cejtin, Matthew Fluet, Suresh
 #    Jagannathan, and Stephen Weeks.
 # Copyright (C) 1997-2000 NEC Research Institute.
 #
 # MLton is released under a HPND-style license.
 # See the file MLton-LICENSE for details.
 ##

# Specify C compiler and binutils.
# Can be used for alternative tools (e.g., `CC=clang` or `CC=gcc-7`).
CC := gcc
AR := ar
RANLIB := ranlib
STRIP := strip

# Specify GMP include and library paths, if not on default search paths.
WITH_GMP_DIR :=
ifneq ($(WITH_GMP_DIR),)
WITH_GMP_INC_DIR := $(WITH_GMP_DIR)/include
WITH_GMP_LIB_DIR := $(WITH_GMP_DIR)/lib
endif

# Specify installation prefix and staged install destination.
PREFIX := /usr/local
DESTDIR :=

# Specify runtime and compile arguments given to (the to-be-built) `mlton` when
# compiling distributed executables ((self-compiled) `mlton`, `mllex`, `mlyacc`,
# `mlprof`, and `mlnlffigen`).
# Can be used for testing (e.g., `MLTON_COMPILE_ARGS="-codegen c"`) or for
# downstream packaging.
MLTON_RUNTIME_ARGS :=
MLTON_COMPILE_ARGS :=

# Specify runtime and compile arguments given to "old" `mlton` when compiling
# "bootstrapped" `mlton`.
# Can be used to work around bugs in "old" `mlton` when compiling "bootstrapped"
# `mlton` (e.g., `BOOTSTRAP_MLTON_COMPILE_ARGS="-drop-pass 'deepFlatten'"`).
BOOTSTRAP_MLTON_RUNTIME_ARGS :=
BOOTSTRAP_MLTON_COMPILE_ARGS :=

# Specify standard tools.
# Can be used for alternative tools (e.g., `SED=gsed`).
DIFF := diff
FIND := find
GIT := git
GREP := grep
GZIP := gzip
PATCH := patch
SED := sed
TAR := tar
XARGS := xargs

CP := cp -fpR
MKDIR := mkdir -p
MV := mv -f
RM := rm -rf

######################################################################
######################################################################

MLTON := mlton
MLTON_NAME := $(shell echo $(MLTON) | sed 's/mlton/MLton/')
MLTON_OUTPUT := $(MLTON)-compile
MLTON_VERSION := $(shell TZ=UTC $(GIT) log -n1 --date=format-local:"%Y%m%d.%H%M%S" --pretty=format:"%cd-g%h$$([ "$$($(GIT) status --porcelain 2> /dev/null)" ] && echo '-dirty')" 2> /dev/null || echo '????????')

######################################################################

TGT_REL_SRC = ref="$(1)" pos="$(2)" down=; ref="$${ref%%/}" pos="$${pos%%/}"; while :; do test "$$pos" = '/' && break ; case "$$ref" in "$$pos"/*) break;; esac; down="../$$down"; pos="$${pos%/*}"; done; echo "$$down$${ref\#\#$$pos/}"

SRC := $(shell cd $(ROOT) ; pwd)
BUILD := $(SRC)/build
BIN := $(BUILD)/bin
LIB := $(BUILD)/lib/mlton
INC := $(LIB)/include
LIB_REL_BIN := $(shell $(call TGT_REL_SRC,$(LIB),$(BIN)))

PATH := $(BIN):$(shell echo $$PATH)

HOST_ARCH := $(shell $(SRC)/bin/host-arch)
HOST_OS := $(shell $(SRC)/bin/host-os)
TARGET := self
TARGET_ARCH := $(HOST_ARCH)
TARGET_OS := $(HOST_OS)

ifeq (mingw, $(TARGET_OS))
EXE := .exe
else
EXE :=
endif

######################################################################

ifeq (other, $(shell if [ ! -x "$(BIN)/$(MLTON)" ]; then echo other; fi))
BOOTSTRAP:=true
else
BOOTSTRAP:=false
endif
CHECK_FIXPOINT:=false
